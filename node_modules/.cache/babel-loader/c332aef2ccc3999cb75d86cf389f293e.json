{"ast":null,"code":"(function (exports) {\n  // Complementary error function\n  // From Numerical Recipes in C 2e p221\n  var erfc = function erfc(x) {\n    var z = Math.abs(x);\n    var t = 1 / (1 + z / 2);\n    var r = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n    return x >= 0 ? r : 2 - r;\n  }; // Inverse complementary error function\n  // From Numerical Recipes 3e p265\n\n\n  var ierfc = function ierfc(x) {\n    if (x >= 2) {\n      return -100;\n    }\n\n    if (x <= 0) {\n      return 100;\n    }\n\n    var xx = x < 1 ? x : 2 - x;\n    var t = Math.sqrt(-2 * Math.log(xx / 2));\n    var r = -0.70711 * ((2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t);\n\n    for (var j = 0; j < 2; j++) {\n      var err = erfc(r) - xx;\n      r += err / (1.12837916709551257 * Math.exp(-(r * r)) - r * err);\n    }\n\n    return x < 1 ? r : -r;\n  }; // Models the normal distribution\n\n\n  var Gaussian = function Gaussian(mean, variance) {\n    if (variance <= 0) {\n      throw new Error('Variance must be > 0 (but was ' + variance + ')');\n    }\n\n    this.mean = mean;\n    this.variance = variance;\n    this.standardDeviation = Math.sqrt(variance);\n  }; // Probability density function\n\n\n  Gaussian.prototype.pdf = function (x) {\n    var m = this.standardDeviation * Math.sqrt(2 * Math.PI);\n    var e = Math.exp(-Math.pow(x - this.mean, 2) / (2 * this.variance));\n    return e / m;\n  }; // Cumulative density function\n\n\n  Gaussian.prototype.cdf = function (x) {\n    return 0.5 * erfc(-(x - this.mean) / (this.standardDeviation * Math.sqrt(2)));\n  }; // Percent point function\n\n\n  Gaussian.prototype.ppf = function (x) {\n    return this.mean - this.standardDeviation * Math.sqrt(2) * ierfc(2 * x);\n  }; // Product distribution of this and d (scale for constant)\n\n\n  Gaussian.prototype.mul = function (d) {\n    if (typeof d === \"number\") {\n      return this.scale(d);\n    }\n\n    var precision = 1 / this.variance;\n    var dprecision = 1 / d.variance;\n    return fromPrecisionMean(precision + dprecision, precision * this.mean + dprecision * d.mean);\n  }; // Quotient distribution of this and d (scale for constant)\n\n\n  Gaussian.prototype.div = function (d) {\n    if (typeof d === \"number\") {\n      return this.scale(1 / d);\n    }\n\n    var precision = 1 / this.variance;\n    var dprecision = 1 / d.variance;\n    return fromPrecisionMean(precision - dprecision, precision * this.mean - dprecision * d.mean);\n  }; // Addition of this and d\n\n\n  Gaussian.prototype.add = function (d) {\n    return gaussian(this.mean + d.mean, this.variance + d.variance);\n  }; // Subtraction of this and d\n\n\n  Gaussian.prototype.sub = function (d) {\n    return gaussian(this.mean - d.mean, this.variance + d.variance);\n  }; // Scale this by constant c\n\n\n  Gaussian.prototype.scale = function (c) {\n    return gaussian(this.mean * c, this.variance * c * c);\n  };\n\n  var gaussian = function gaussian(mean, variance) {\n    return new Gaussian(mean, variance);\n  };\n\n  var fromPrecisionMean = function fromPrecisionMean(precision, precisionmean) {\n    return gaussian(precisionmean / precision, 1 / precision);\n  };\n\n  exports(gaussian);\n})(typeof exports !== \"undefined\" ? function (e) {\n  module.exports = e;\n} : function (e) {\n  this[\"gaussian\"] = e;\n});","map":null,"metadata":{},"sourceType":"script"}