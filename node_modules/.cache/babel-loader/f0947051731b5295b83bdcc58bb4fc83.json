{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _objectWithoutProperties2 = require(\"babel-runtime/helpers/objectWithoutProperties\");\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _types = require(\"../../types\");\n\nvar types = _interopRequireWildcard(_types);\n\nvar _utils = require(\"../../utils\");\n\nvar _validate = require(\"../../validate\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar AnyOfField = function (_Component) {\n  (0, _inherits3.default)(AnyOfField, _Component);\n\n  function AnyOfField(props) {\n    (0, _classCallCheck3.default)(this, AnyOfField);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (AnyOfField.__proto__ || (0, _getPrototypeOf2.default)(AnyOfField)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var _this$props = _this.props,\n        formData = _this$props.formData,\n        options = _this$props.options;\n    _this.state = {\n      selectedOption: _this.getMatchingOption(formData, options)\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(AnyOfField, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var matchingOption = this.getMatchingOption(nextProps.formData, nextProps.options);\n\n      if (matchingOption === this.state.selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption\n      });\n    }\n  }, {\n    key: \"getMatchingOption\",\n    value: function getMatchingOption(formData, options) {\n      for (var i = 0; i < options.length; i++) {\n        var option = options[i]; // If the schema describes an object then we need to add slightly more\n        // strict matching to the schema, because unless the schema uses the\n        // \"requires\" keyword, an object will match the schema as long as it\n        // doesn't have matching keys with a conflicting type. To do this we use an\n        // \"anyOf\" with an array of requires. This augmentation expresses that the\n        // schema should match if any of the keys in the schema are present on the\n        // object and pass validation.\n\n        if (option.properties) {\n          // Create an \"anyOf\" schema that requires at least one of the keys in the\n          // \"properties\" object\n          var requiresAnyOf = {\n            anyOf: (0, _keys2.default)(option.properties).map(function (key) {\n              return {\n                required: [key]\n              };\n            })\n          };\n          var augmentedSchema = void 0; // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n\n          if (option.anyOf) {\n            // Create a shallow clone of the option\n            var shallowClone = (0, _objectWithoutProperties3.default)(option, []);\n\n            if (!shallowClone.allOf) {\n              shallowClone.allOf = [];\n            } else {\n              // If \"allOf\" already exists, shallow clone the array\n              shallowClone.allOf = shallowClone.allOf.slice();\n            }\n\n            shallowClone.allOf.push(requiresAnyOf);\n            augmentedSchema = shallowClone;\n          } else {\n            augmentedSchema = (0, _assign2.default)({}, option, requiresAnyOf);\n          }\n\n          if ((0, _validate.isValid)(augmentedSchema, formData)) {\n            return i;\n          }\n        } else if ((0, _validate.isValid)(options[i], formData)) {\n          return i;\n        }\n      } // If the form data matches none of the options, use the first option\n\n\n      return 0;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          baseType = _props.baseType,\n          disabled = _props.disabled,\n          errorSchema = _props.errorSchema,\n          formData = _props.formData,\n          idPrefix = _props.idPrefix,\n          idSchema = _props.idSchema,\n          onBlur = _props.onBlur,\n          onChange = _props.onChange,\n          onFocus = _props.onFocus,\n          options = _props.options,\n          registry = _props.registry,\n          safeRenderCompletion = _props.safeRenderCompletion,\n          uiSchema = _props.uiSchema;\n      var _SchemaField = registry.fields.SchemaField;\n      var selectedOption = this.state.selectedOption;\n      var option = options[selectedOption] || null;\n      var optionSchema = void 0;\n\n      if (option) {\n        // If the subschema doesn't declare a type, infer the type from the\n        // parent schema\n        optionSchema = option.type ? option : (0, _assign2.default)({}, option, {\n          type: baseType\n        });\n      }\n\n      return _react2.default.createElement(\"div\", {\n        className: \"panel panel-default panel-body\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"form-group\"\n      }, _react2.default.createElement(\"select\", {\n        className: \"form-control\",\n        onChange: this.onOptionChange,\n        value: selectedOption,\n        id: idSchema.$id + \"_anyof_select\"\n      }, options.map(function (option, index) {\n        return _react2.default.createElement(\"option\", {\n          key: index,\n          value: index\n        }, option.title || \"Option \" + (index + 1));\n      }))), option !== null && _react2.default.createElement(_SchemaField, {\n        schema: optionSchema,\n        uiSchema: uiSchema,\n        errorSchema: errorSchema,\n        idSchema: idSchema,\n        idPrefix: idPrefix,\n        formData: formData,\n        onChange: onChange,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        registry: registry,\n        safeRenderCompletion: safeRenderCompletion,\n        disabled: disabled\n      }));\n    }\n  }]);\n  return AnyOfField;\n}(_react.Component);\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onOptionChange = function (event) {\n    var selectedOption = parseInt(event.target.value, 10);\n    var _props2 = _this2.props,\n        formData = _props2.formData,\n        onChange = _props2.onChange,\n        options = _props2.options;\n\n    if ((0, _utils.guessType)(formData) === \"object\") {\n      var newFormData = (0, _assign2.default)({}, formData);\n      var optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1); // Discard any data added using other options\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)(optionsToDiscard), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var option = _step.value;\n\n          if (option.properties) {\n            for (var key in option.properties) {\n              if (newFormData.hasOwnProperty(key)) {\n                delete newFormData[key];\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      onChange(newFormData);\n    } else {\n      onChange(undefined);\n    }\n\n    _this2.setState({\n      selectedOption: parseInt(event.target.value, 10)\n    });\n  };\n};\n\nAnyOfField.defaultProps = {\n  disabled: false,\n  errorSchema: {},\n  idSchema: {},\n  uiSchema: {}\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  AnyOfField.propTypes = {\n    options: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,\n    baseType: _propTypes2.default.string,\n    uiSchema: _propTypes2.default.object,\n    idSchema: _propTypes2.default.object,\n    formData: _propTypes2.default.any,\n    errorSchema: _propTypes2.default.object,\n    registry: types.registry.isRequired\n  };\n}\n\nexports.default = AnyOfField;","map":null,"metadata":{},"sourceType":"script"}