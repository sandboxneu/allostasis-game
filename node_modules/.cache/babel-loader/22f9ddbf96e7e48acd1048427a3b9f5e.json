{"ast":null,"code":"import _classCallCheck from \"/Users/yashshetty/Desktop/Sandbox/allostasis-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yashshetty/Desktop/Sandbox/allostasis-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yashshetty/Desktop/Sandbox/allostasis-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yashshetty/Desktop/Sandbox/allostasis-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yashshetty/Desktop/Sandbox/allostasis-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yashshetty/Desktop/Sandbox/allostasis-game/src/Grid/Grid.js\";\nimport React, { Component } from 'react';\nimport './Grid.css';\nimport GridComponent from './GridComponent.js';\nimport ConfigurableValuesController from '../ConfigurableValuesController.js';\nimport GlobalConstants from '../GlobalConstants.js';\nimport EntityComponent from './EntityComponent.js';\nimport PlayerGrid from './PlayerGrid.js';\n\nvar Grid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Grid, _Component);\n\n  function Grid() {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this));\n    _this.state = {\n      randomVariable: true\n    };\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"isPlayerObject\",\n    value: function isPlayerObject(gridval) {}\n  }, {\n    key: \"isWaterObject\",\n    value: function isWaterObject(gridVal) {\n      return gridVal === GlobalConstants.WATER_ONE_GRID_CELL || gridVal === GlobalConstants.WATER_TWO_GRID_CELL;\n    }\n  }, {\n    key: \"isFoodObject\",\n    value: function isFoodObject(gridVal) {\n      return gridVal === GlobalConstants.FOOD_ONE_GRID_CELL || gridVal === GlobalConstants.FOOD_TWO_GRID_CELL;\n    } // Returns a list of the entities at the given coordinates\n\n  }, {\n    key: \"getEntitiesAt\",\n    value: function getEntitiesAt(x, y, entities) {\n      return entities.filter(function (e) {\n        return e.x === x && e.y === y;\n      });\n    }\n  }, {\n    key: \"renderGrid\",\n    value: function renderGrid() {\n      var gridObjects = [];\n      var gridRowLength = ConfigurableValuesController.getGridRowLength();\n      var size = ConfigurableValuesController.getGridSize();\n\n      for (var y = 0; y < gridRowLength; y++) {\n        for (var x = 0; x < gridRowLength; x++) {\n          var curEntities = this.getEntitiesAt(x, y, this.props.entities);\n\n          if (curEntities.length !== 0) {\n            var curEntity = curEntities[0];\n            gridObjects.push(React.createElement(EntityComponent, {\n              size: size,\n              name: curEntity.data.name,\n              image: curEntity.data.image,\n              x: x,\n              y: y,\n              key: x + ' ' + y,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46\n              },\n              __self: this\n            }));\n          } else {\n            gridObjects.push(React.createElement(GridComponent, {\n              size: size,\n              x: x,\n              y: y,\n              key: x + ' ' + y,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54\n              },\n              __self: this\n            }));\n          }\n        }\n      }\n\n      return gridObjects;\n    }\n  }, {\n    key: \"renderPlayer\",\n    value: function renderPlayer() {\n      return React.createElement(PlayerGrid, {\n        size: ConfigurableValuesController.getGridSize(),\n        xPos: this.props.playerX,\n        yPos: this.props.playerY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"gridOutline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.renderGrid(), this.renderPlayer());\n    }\n  }]);\n\n  return Grid;\n}(Component);\n\nexport default Grid;","map":{"version":3,"sources":["/Users/yashshetty/Desktop/Sandbox/allostasis-game/src/Grid/Grid.js"],"names":["React","Component","GridComponent","ConfigurableValuesController","GlobalConstants","EntityComponent","PlayerGrid","Grid","state","randomVariable","gridval","gridVal","WATER_ONE_GRID_CELL","WATER_TWO_GRID_CELL","FOOD_ONE_GRID_CELL","FOOD_TWO_GRID_CELL","x","y","entities","filter","e","gridObjects","gridRowLength","getGridRowLength","size","getGridSize","curEntities","getEntitiesAt","props","length","curEntity","push","data","name","image","playerX","playerY","renderGrid","renderPlayer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Grid.css';\nimport GridComponent from './GridComponent.js';\nimport ConfigurableValuesController from '../ConfigurableValuesController.js';\nimport GlobalConstants from '../GlobalConstants.js';\nimport EntityComponent from './EntityComponent.js';\nimport PlayerGrid from './PlayerGrid.js';\n\nclass Grid extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      randomVariable: true\n    }\n\n  }\n\n  isPlayerObject(gridval) {\n  \n  }\n\n  isWaterObject(gridVal) {\n    return gridVal === GlobalConstants.WATER_ONE_GRID_CELL || gridVal === GlobalConstants.WATER_TWO_GRID_CELL;\n  }\n\n  isFoodObject(gridVal) {\n    return gridVal === GlobalConstants.FOOD_ONE_GRID_CELL || gridVal === GlobalConstants.FOOD_TWO_GRID_CELL;\n  }\n\n  // Returns a list of the entities at the given coordinates\n  getEntitiesAt(x, y, entities) {\n    return entities.filter(e => e.x === x && e.y === y);\n  }\n\n  renderGrid() {\n    let gridObjects = [];\n    const gridRowLength = ConfigurableValuesController.getGridRowLength();\n    const size = ConfigurableValuesController.getGridSize();\n\n    for (let y = 0; y < gridRowLength; y++) {\n      for(let x = 0; x < gridRowLength; x++) {\n        let curEntities = this.getEntitiesAt(x, y, this.props.entities);\n        if(curEntities.length !== 0) {\n          let curEntity = curEntities[0];\n          gridObjects.push(<EntityComponent\n                             size={size}\n                             name={curEntity.data.name}\n                             image={curEntity.data.image}\n                             x={x}\n                             y={y}\n                             key={x + ' ' + y}/>);\n        } else {\n          gridObjects.push(<GridComponent\n                              size={size}\n                              x={x}\n                              y={y}\n                              key={x + ' ' + y}/>);\n        }\n      }\n    }\n\n    return gridObjects;\n  }\n\n  renderPlayer() {\n    return <PlayerGrid\n              size = {ConfigurableValuesController.getGridSize()}\n              xPos = {this.props.playerX}\n              yPos = {this.props.playerY}/>;\n  }\n\n  render() {\n    return (\n      <div className=\"gridOutline\">\n        {this.renderGrid()}\n        {this.renderPlayer()}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}